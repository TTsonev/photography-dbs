CREATE TABLE fotograf(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1,
    vorname VARCHAR(30) NOT NULL,
    nachname VARCHAR(30) NOT NULL,
    leiter INTEGER DEFAULT 1,
    CONSTRAINT pk_fotograf PRIMARY KEY (id),
    CONSTRAINT fk_fotograf FOREIGN KEY (leiter) REFERENCES fotograf(id)
);

CREATE TABLE objektiv(
    objnr INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 200000,                       
    min_blende NUMERIC(2,1),
    max_blende NUMERIC(2,1),
    CONSTRAINT pk_objektiv PRIMARY KEY (objnr),
    CONSTRAINT valid_objektiv_blende CHECK(min_blende <= max_blende AND min_blende > 0 AND max_blende > 0)
);

CREATE TABLE kamera(
    kameranr INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 100000,
    typ VARCHAR(20),
    aufloesungen INTEGER DEFAULT 0,
    CONSTRAINT pk_kamera PRIMARY KEY (kameranr),
    CONSTRAINT valid_kamera_aufloesungen CHECK(aufloesungen >= 0),
    CONSTRAINT valid_kamera_typ CHECK(upper(typ) in ('DSLR', 'MIRRORLESS', 'ANALOG', 'INSTANT'))
);

CREATE TABLE sony_kamera(
    kameranr INTEGER,
    zustand VARCHAR(13),
    farbe VARCHAR(7),
    CONSTRAINT pk_sony PRIMARY KEY (kameranr),
    CONSTRAINT fk_sony FOREIGN KEY (kameranr) REFERENCES kamera ON DELETE CASCADE,
    CONSTRAINT valid_sony_farbe CHECK(lower(farbe) IN ('schwarz', 'weiss', 'grau')),
    CONSTRAINT valid_sony_zustand CHECK(lower(zustand) IN ('gut', 'mittelmaessig', 'schlecht'))
);

CREATE TABLE haben(
    id INTEGER NOT NULL,
    kameranr INTEGER NOT NULL,
    objnr INTEGER NOT NULL,
    CONSTRAINT pk_haben PRIMARY KEY (objnr, id),
    CONSTRAINT fk_haben1 FOREIGN KEY (objnr) REFERENCES objektiv ON DELETE CASCADE,
    CONSTRAINT fk_haben2 FOREIGN KEY (id) REFERENCES fotograf ON DELETE CASCADE,
    CONSTRAINT fk_haben3 FOREIGN KEY (kameranr) REFERENCES kamera ON DELETE CASCADE,
    CONSTRAINT m11_haben UNIQUE (objnr, kameranr) 
);

CREATE TABLE foto(
    kennzahl SMALLINT,      
    id INTEGER NOT NULL,
    exposition NUMERIC(2,1) DEFAULT 0,
    zeit TIMESTAMP,
    standort VARCHAR(30),
    CONSTRAINT pk_foto PRIMARY KEY (kennzahl, id),
    CONSTRAINT fk_foto FOREIGN KEY (id) REFERENCES fotograf ON DELETE CASCADE,
    CONSTRAINT valid_foto_exp CHECK(exposition >= -3 AND exposition <= 3),
    CONSTRAINT valid_foto_kennzahl CHECK(kennzahl >= 0)
);

CREATE TABLE model( 
    modelnr INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1000,
    "alter" SMALLINT,
    geschlecht CHAR(1),
    CONSTRAINT pk_model PRIMARY KEY (modelnr),
    CONSTRAINT valid_model_age CHECK("alter" >= 0 AND "alter" <= 100),
    CONSTRAINT valid_model_geschlecht CHECK(upper(geschlecht)='M' OR upper(geschlecht)='W')
);

CREATE TABLE zeigen(
    modelnr INTEGER,
    kennzahl INTEGER,
    id INTEGER,
    CONSTRAINT pk_zeigen PRIMARY KEY (modelnr, kennzahl, id),
    CONSTRAINT fk_zeigen1 FOREIGN KEY (modelnr) REFERENCES model ON DELETE CASCADE,
    CONSTRAINT fk_zeigen2 FOREIGN KEY (kennzahl, id) REFERENCES foto ON DELETE CASCADE
);


CREATE VIEW sony_is_a 
    AS SELECT * FROM sony_kamera NATURAL JOIN kamera;
    
      
CREATE OR REPLACE NONEDITIONABLE PROCEDURE p_count_foto(
   p_standort  IN  foto.standort%TYPE,
   res OUT NUMBER
)
AS
  BEGIN
    SELECT COUNT(*)
    INTO res
    FROM foto
    WHERE p_standort = foto.standort;
  END p_count_foto;
/  
  
CREATE TRIGGER trig_kamera_auf BEFORE UPDATE ON kamera
    FOR EACH ROW
    WHEN (new.aufloesungen > 200000)
    BEGIN
     :new.aufloesungen := 200000; 
    END;
/    
    
CREATE OR REPLACE NONEDITIONABLE PROCEDURE p_delete_objektiv(
   p_objnr IN objektiv.objnr%TYPE,
   p_error_code OUT NUMBER
)
AS
  BEGIN
    DELETE  
    FROM objektiv
    WHERE p_objnr = objektiv.objnr;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
      p_error_code := SQLCODE;
  END p_delete_objektiv;
/  
  
CREATE OR REPLACE NONEDITIONABLE PROCEDURE p_delete_fotograf(
   p_fotograf_id  IN  fotograf.id%TYPE,
   p_error_code OUT NUMBER
)
AS
  BEGIN
    DELETE  
    FROM fotograf
    WHERE p_fotograf_id = fotograf.id;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
      p_error_code := SQLCODE;
  END p_delete_fotograf;
/